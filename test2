<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TRT・PRA理論 インタラクティブ・シミュレータ v4.3 - 戦略的初期配置モデル</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body {
            margin: 0;
            font-family: 'Arial', sans-serif;
            background: #f0f0f0;
            overflow: hidden;
            color: #333;
        }
        #canvas-container {
            position: relative;
            width: 100vw;
            height: 100vh;
        }
        #control-panel {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background: rgba(255, 255, 255, 0.98);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
            width: 320px;
            max-height: calc(100vh - 40px);
            overflow-y: auto;
            z-index: 100;
            transition: all 0.3s ease;
        }
        #control-panel.collapsed {
            height: auto;
            max-height: 50px;
            overflow: hidden;
        }
        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .collapse-button {
            width: 30px;
            height: 30px;
            background: #e5e7eb;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.2s;
        }
        .collapse-button:hover {
            background: #d1d5db;
        }
        .panel-content {
            transition: all 0.3s ease;
        }
        #control-panel.collapsed .panel-content {
            display: none;
        }
        h1 {
            font-size: 18px;
            margin: 0;
            color: #1f2937;
        }
        h2 {
            font-size: 14px;
            margin: 15px 0 10px 0;
            color: #374151;
            border-bottom: 1px solid #e5e7eb;
            padding-bottom: 5px;
        }
        .parameter-group {
            background: #f9fafb;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 12px;
            border: 1px solid #e5e7eb;
        }
        .parameter {
            margin-bottom: 12px;
        }
        .parameter label {
            display: block;
            font-size: 12px;
            color: #4b5563;
            margin-bottom: 4px;
            font-weight: 600;
        }
        .parameter input[type="range"] {
            width: 100%;
            height: 5px;
            border-radius: 3px;
            background: #e5e7eb;
            outline: none;
            -webkit-appearance: none;
        }
        .parameter input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: #3b82f6;
            cursor: pointer;
            transition: background 0.2s;
        }
        .parameter input[type="range"]::-webkit-slider-thumb:hover {
            background: #2563eb;
        }
        .parameter-value {
            display: inline-block;
            font-size: 11px;
            color: #6b7280;
            margin-left: 8px;
            min-width: 40px;
            text-align: right;
        }
        .stats-panel {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.98);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
            z-index: 100;
            width: 280px;
        }
        .legend {
            position: absolute;
            bottom: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.98);
            padding: 15px;
            border-radius: 12px;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
            z-index: 100;
            max-width: 200px;
        }
        .legend-item {
            display: flex;
            align-items: center;
            margin: 6px 0;
            font-size: 11px;
        }
        .legend-color, .legend-shape {
            width: 18px;
            height: 18px;
            margin-right: 8px;
        }
        .stat-item {
            margin: 8px 0;
            font-size: 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        #notification-container {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 2000;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }
        .notification {
            background-color: #2c3e50;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            font-size: 14px;
            opacity: 0;
            transform: translateY(-20px);
            transition: opacity 0.5s, transform 0.5s;
        }
        .notification.show {
            opacity: 1;
            transform: translateY(0);
        }
        @media (max-width: 768px) {
            #control-panel, .stats-panel, .legend, .cluster-visualization {
                position: relative;
                width: auto;
                left: 10px;
                right: 10px;
                top: auto;
                bottom: auto;
                margin: 10px 0;
                max-height: 40vh;
            }
            body {
                overflow: auto;
            }
            #canvas-container {
                display: flex;
                flex-direction: column;
                height: auto;
            }
            .stats-panel { order: -2; }
            .legend { order: -1; }
        }
    </style>
</head>
<body>
    <div id="canvas-container"></div>
    <div id="notification-container"></div>

    <script>
        // --- Setup (Scene, Camera, Renderer, Lights, Ground) ---
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xf8f8f8);
        scene.fog = new THREE.Fog(0xf8f8f8, 100, 300);

        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(50, 40, 60);
        camera.lookAt(0, 20, 0);

        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMap.enabled = true;
        document.getElementById('canvas-container').appendChild(renderer.domElement);

        const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(50, 100, 50);
        directionalLight.castShadow = true;
        scene.add(directionalLight);

        const ground = new THREE.Mesh(new THREE.PlaneGeometry(100, 100), new THREE.MeshPhongMaterial({ color: 0xe0e0e0, side: THREE.DoubleSide }));
        ground.rotation.x = -Math.PI / 2;
        ground.receiveShadow = true;
        scene.add(ground);

        // --- Parameters & State ---
        const parameters = {
            timeScale: 0.1,
            spawnInterval: 0.5,
            batchSize: 3,
            initialParticles: 20,
            heterogeneity: 0.5, // Kept for compatibility, but new ratios are primary
            lifespanVariance: 0.3,
            // --- Strategic Spawning ---
            exploiterRatio: 0.3,
            explorerRatio: 0.3,
            strategicSpawningEnabled: true,
            // --- TRT/PRA ---
            trtForce: 0.015,
            trtAcceleration: 1.0,
            tippingPoint: 0.7,
            praForce: 0.02,
            praDiversity: 1.0,
            // --- Multi-Gravity ---
            centralConvergence: 0.03,
            clusterConvergence: 0.02,
            clusterInertia: 0.015,
            marketPull: 0.02,
            clusterPermeability: 0.8,
            peerAttraction: 0.01,
            attractionRange: 5,
            clusterThreshold: 3,
            // --- Other ---
            successThreshold: 38,
            vertexCapacity: 5,
            resourceRecycleRate: 0.7,
            knowledgeTransferRate: 0.3,
            attritionRate: 0.02,
            coneTiltX: 0,
            coneTiltZ: 0,
            asymmetryX: 1.0,
            asymmetryZ: 1.0,
        };

        const simulationState = {
            isRunning: false,
            isPaused: false,
            elapsedTime: 0,
            lastSpawnTime: 0,
            totalSpawned: 0,
            successCount: 0,
            clusters: [],
        };
        
        let particles = [];
        let nextParticleId = 0;

        const coneHeight = 40;
        const coneRadius = 20;

        const ParticleType = {
            STANDARD: 'standard',
            EXPLORER: 'explorer',
            EXPLOITER: 'exploiter'
        };
        
        // --- Core Classes (ResourceParticle, Cluster, etc.) ---
        class ResourceParticle {
            constructor(id, spawnTime = 0) {
                this.id = id;
                this.spawnTime = spawnTime;
                this.age = 0;
                this.isActive = true;
                this.hasSucceeded = false;
                this.velocity = new THREE.Vector3((Math.random() - 0.5) * 0.05, Math.random() * 0.02 + 0.01, (Math.random() - 0.5) * 0.05);

                this._determineType();
                this.setAttributesByType();
                this._determineInitialPosition();

                this.createMesh();
                const baseLifespan = 100;
                this.maxAge = baseLifespan * (1 + (Math.random() - 0.5) * parameters.lifespanVariance);
            }

            _determineType() {
                const typeRandom = Math.random();
                if (typeRandom < parameters.exploiterRatio) {
                    this.type = ParticleType.EXPLOITER;
                } else if (typeRandom < parameters.exploiterRatio + parameters.explorerRatio) {
                    this.type = ParticleType.EXPLORER;
                } else {
                    this.type = ParticleType.STANDARD;
                }
            }

            _determineInitialPosition() {
                let angle, radius;
                this.position = new THREE.Vector3(0, 0.5, 0); // Default height

                if (parameters.strategicSpawningEnabled) {
                    switch (this.type) {
                        case ParticleType.EXPLOITER:
                            if (simulationState.clusters.length > 0) {
                                const targetCluster = simulationState.clusters[Math.floor(Math.random() * simulationState.clusters.length)];
                                angle = Math.random() * Math.PI * 2;
                                radius = Math.random() * parameters.attractionRange * 0.8;
                                this.position.x = targetCluster.center.x + Math.cos(angle) * radius;
                                this.position.z = targetCluster.center.z + Math.sin(angle) * radius;
                            } else {
                                angle = Math.random() * Math.PI * 2;
                                radius = Math.random() * coneRadius * 0.3; // Central area
                                this.position.x = Math.cos(angle) * radius;
                                this.position.z = Math.sin(angle) * radius;
                            }
                            break;
                        case ParticleType.EXPLORER:
                            angle = Math.random() * Math.PI * 2;
                            radius = coneRadius * (0.7 + Math.random() * 0.3); // Periphery
                            this.position.x = Math.cos(angle) * radius;
                            this.position.z = Math.sin(angle) * radius;
                            break;
                        default: // STANDARD
                            angle = Math.random() * Math.PI * 2;
                            radius = Math.random() * coneRadius * 0.8;
                            this.position.x = Math.cos(angle) * radius;
                            this.position.z = Math.sin(angle) * radius;
                            break;
                    }
                } else {
                    angle = Math.random() * Math.PI * 2;
                    radius = Math.random() * coneRadius * 0.8;
                    this.position.x = Math.cos(angle) * radius;
                    this.position.z = Math.sin(angle) * radius;
                }
            }
            
            // ... (rest of the class methods: setAttributesByType, createMesh, update, etc.)
            // The refactored `update` and its helper methods would go here.
            // For brevity in this example, we'll keep the logic conceptual.
            // A full implementation would break down the original `update` function from the file
            // into smaller functions like _applyForces, _checkBoundaryConstraints etc.
             update(deltaTime, particles, params) {
                if (!this.isActive) return;

                this._updateState(deltaTime, params);
                if (!this.isActive) return;

                this._applyForces(deltaTime, params);
                this._updatePosition(deltaTime);
                this._checkBoundaryConstraints(params);
                this._handleSuccess(params);
                this._updateVisuals();
            }

            _updateState(deltaTime, params) { /* Age, Attrition Checks */ }
            _applyForces(deltaTime, params) { /* TRT, PRA, Gravity, etc. */ }
            _updatePosition(deltaTime) { this.position.add(this.velocity.clone().multiplyScalar(deltaTime)); this.velocity.multiplyScalar(0.98); }
            _checkBoundaryConstraints(params) { /* Cone boundary logic */ }
            _handleSuccess(params) { /* Success check and actions */ }
            _updateVisuals() { this.mesh.position.copy(this.position); /* Color updates */ }
            
            succeed() { /* success logic */ }
            die() { /* die logic */ }
            remove() { this.isActive = false; scene.remove(this.mesh); }
        }


        // --- UI & Controls ---
        function setupUI() {
            // This function would create and append all the HTML for the panels
            // to keep the initial HTML body clean. For this example, we assume HTML is pre-written.
            
            document.querySelectorAll('input[type="range"]').forEach(input => {
                input.addEventListener('input', (e) => {
                    const param = e.target.id;
                    const value = parseFloat(e.target.value);
                    parameters[param] = value;
                    document.getElementById(`${param}-value`).textContent = value.toFixed(param.includes('Ratio') ? 2 : 1);
                });
            });

            document.getElementById('strategicSpawningEnabled').addEventListener('change', (e) => {
                parameters.strategicSpawningEnabled = e.target.checked;
                document.getElementById('strategicSpawningEnabled-value').textContent = e.target.checked ? '有効' : '無効';
            });

            // ... other event listeners for buttons, etc.
        }
        
        function showNotification(message, duration = 4000) {
            const container = document.getElementById('notification-container');
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.textContent = message;
            container.appendChild(notification);
            setTimeout(() => { notification.classList.add('show'); }, 10);
            setTimeout(() => {
                notification.classList.remove('show');
                notification.addEventListener('transitionend', () => notification.remove());
            }, duration);
        }

        function setIndustryParameters(profileName) {
            // Logic to set parameters based on industry profiles,
            // then calls showNotification.
            const changedParams = { /* ... */ }; // Calculate changed params
            showNotification(`産業プロファイル「${profileName}」を適用。${Object.keys(changedParams).length}個のパラメータ更新。`);
            updateParameterDisplays();
        }


        // --- Simulation Logic ---
        function spawnParticles(count) {
            for (let i = 0; i < count; i++) {
                const particle = new ResourceParticle(nextParticleId++, simulationState.elapsedTime);
                particles.push(particle);
                simulationState.totalSpawned++;
            }
        }
        
        function resetSimulation() {
            // ... (Reset state, clear particles)
            particles.forEach(p => p.remove());
            particles = [];
            nextParticleId = 0;
            // ...
        }

        // --- Animation Loop ---
        function animate() {
            requestAnimationFrame(animate);
            const deltaTime = 0.016; // Simplified delta time

            if (simulationState.isRunning && !simulationState.isPaused) {
                // Spawn particles logic
                if (simulationState.elapsedTime - simulationState.lastSpawnTime >= parameters.spawnInterval) {
                    spawnParticles(parameters.batchSize);
                    simulationState.lastSpawnTime = simulationState.elapsedTime;
                }
                
                // Update particles
                particles.forEach(p => p.update(deltaTime, particles, parameters));
                
                // Remove inactive
                particles = particles.filter(p => p.isActive);
                
                // Update stats, clusters, etc.
            }
            
            renderer.render(scene, camera);
        }

        // --- Initial Call ---
        setupUI();
        animate();
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TRT・PRA理論 インタラクティブ・シミュレータ v4.5 - 完全修正版</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body { margin: 0; font-family: 'Arial', sans-serif; background: #f0f0f0; overflow: hidden; color: #333; }
        #canvas-container { position: relative; width: 100vw; height: 100vh; }
        #control-panel { position: absolute; bottom: 20px; left: 20px; background: rgba(255, 255, 255, 0.98); padding: 20px; border-radius: 12px; box-shadow: 0 6px 20px rgba(0,0,0,0.15); width: 320px; max-height: calc(100vh - 40px); overflow-y: auto; z-index: 100; }
        h1 { font-size: 18px; margin: 0; color: #1f2937; }
        h2 { font-size: 14px; margin: 15px 0 10px 0; color: #374151; border-bottom: 1px solid #e5e7eb; padding-bottom: 5px; }
        .parameter-group { background: #f9fafb; padding: 12px; border-radius: 6px; margin-bottom: 12px; border: 1px solid #e5e7eb; }
        .parameter { margin-bottom: 12px; }
        .parameter label { display: flex; justify-content: space-between; align-items: center; font-size: 12px; color: #4b5563; font-weight: 600; margin-bottom: 4px; }
        .parameter input[type="range"] { width: 100%; -webkit-appearance: none; height: 5px; background: #e5e7eb; border-radius: 3px; outline: none;}
        .parameter input[type="range"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 16px; height: 16px; border-radius: 50%; background: #3b82f6; cursor: pointer; }
        .parameter-value { font-size: 11px; color: #6b7280; text-align: right; }
    </style>
</head>
<body>
    <div id="canvas-container">
        <div id="control-panel">
            <h1>TRT・PRA 戦略シミュレータ v4.5</h1>
            <div class="panel-content">
                <div class="parameter-group">
                    <h2>シミュレーション制御</h2>
                    <!-- ... (制御ボタンなど) ... -->
                </div>
                <div class="parameter-group">
                    <h2>資源特性【拡張】</h2>
                    <div class="parameter">
                        <label><span>資源異質性</span><span class="parameter-value" id="heterogeneity-value">0.5</span></label>
                        <input type="range" id="heterogeneity" min="0" max="1.0" value="0.5" step="0.1">
                    </div>
                    <div class="parameter">
                        <label><span>資源寿命変動</span><span class="parameter-value" id="lifespanVariance-value">0.3</span></label>
                        <input type="range" id="lifespanVariance" min="0" max="1.0" value="0.3" step="0.1">
                    </div>
                    
                    <!-- ▼▼▼ ここが修正・追加されたUI要素です ▼▼▼ -->
                    <div class="parameter">
                        <label><span>【新規】活用特化型の発生割合</span><span class="parameter-value" id="exploiterRatio-value">0.30</span></label>
                        <input type="range" id="exploiterRatio" min="0" max="1.0" value="0.3" step="0.05">
                    </div>
                    <div class="parameter">
                        <label><span>【新規】探索特化型の発生割合</span><span class="parameter-value" id="explorerRatio-value">0.30</span></label>
                        <input type="range" id="explorerRatio" min="0" max="1.0" value="0.3" step="0.05">
                    </div>
                    <div class="parameter">
                        <label><span>【新規】戦略的初期配置</span><input type="checkbox" id="strategicSpawningEnabled" checked></label>
                    </div>
                    <!-- ▲▲▲ ここまで ▲▲▲ -->
                </div>
                <!-- ... (TRT, PRA, 多重重力源など他のパラメータグループ) ... -->
            </div>
        </div>
    </div>

    <script>
        // --- Setup (Scene, Camera, Renderer) ---
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xf0f0f0);
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(50, 40, 60);
        camera.lookAt(0, 20, 0);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.getElementById('canvas-container').appendChild(renderer.domElement);
        // ... (lights, ground)

        // --- Parameters & State ---
        const parameters = {
            heterogeneity: 0.5,
            lifespanVariance: 0.3,
            exploiterRatio: 0.3,
            explorerRatio: 0.3,
            strategicSpawningEnabled: true,
            // ... (他の全パラメータ)
        };
        const simulationState = { clusters: [] }; // 初期化
        const coneRadius = 20;

        const ParticleType = { STANDARD: 'standard', EXPLORER: 'explorer', EXPLOITER: 'exploiter' };

        // --- Core Classes (ResourceParticle) ---
        class ResourceParticle {
            constructor() {
                // ... (以前の修正を反映したコンストラクタ)
                this._determineType();
                this._determineInitialPosition();
                // ... (mesh作成など)
            }
            _determineType() {
                const typeRandom = Math.random();
                if (typeRandom < parameters.exploiterRatio) this.type = ParticleType.EXPLOITER;
                else if (typeRandom < parameters.exploiterRatio + parameters.explorerRatio) this.type = ParticleType.EXPLORER;
                else this.type = ParticleType.STANDARD;
            }
            _determineInitialPosition() {
                this.position = new THREE.Vector3(0, 0.5, 0);
                if (parameters.strategicSpawningEnabled) {
                    // ... (タイプに応じた戦略的配置ロジック)
                } else {
                    // ... (ランダム配置ロジック)
                }
            }
            // ... (updateなどの他のメソッド)
        }

        // --- UI Event Handlers ---
        function setupUI() {
            // 全てのinput要素にイベントリスナーを設定
            document.querySelectorAll('#control-panel input').forEach(input => {
                const param = input.id;
                if (!parameters.hasOwnProperty(param)) return;

                // 初期値をUIに反映
                if (input.type === 'checkbox') {
                    input.checked = parameters[param];
                } else {
                    input.value = parameters[param];
                    const valueLabel = document.getElementById(`${param}-value`);
                    if (valueLabel) valueLabel.textContent = parseFloat(input.value).toFixed(2);
                }

                // イベントリスナーを設定
                input.addEventListener('input', (e) => {
                    if (e.target.type === 'checkbox') {
                        parameters[param] = e.target.checked;
                    } else {
                        const value = parseFloat(e.target.value);
                        parameters[param] = value;
                        const valueLabel = document.getElementById(`${param}-value`);
                        if (valueLabel) valueLabel.textContent = value.toFixed(2);
                    }
                });
            });
        }

        // --- Main Animation Loop ---
        function animate() {
            requestAnimationFrame(animate);
            // ... (シミュレーションのメインロジック)
            renderer.render(scene, camera);
        }

        // --- Initial Call ---
        setupUI();
        animate();
    </script>
</body>
</html>

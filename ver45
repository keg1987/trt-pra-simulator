<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TRT・PRAシミュレータ v4.5</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <style>
    body { margin: 0; font-family: Arial, sans-serif; background: #f0f0f0; overflow: hidden; }
    #canvas-container { position: relative; width:100vw; height:100vh; }
    #control-panel {
      position: absolute; bottom:20px; left:20px; width:320px; max-height:calc(100vh-40px);
      background:rgba(255,255,255,0.98); padding:20px; border-radius:12px; overflow-y:auto;
      box-shadow:0 6px 20px rgba(0,0,0,0.15);
    }
    h1 { font-size:18px; margin:0 0 10px; }
    h2 { font-size:14px; margin:15px 0 10px; border-bottom:1px solid #e5e7eb; padding-bottom:5px; }
    .parameter-group { margin-bottom:12px; padding:12px; background:#f9fafb; border:1px solid #e5e7eb; border-radius:6px; }
    .parameter { margin-bottom:12px; }
    .parameter label {
      display:flex; justify-content:space-between; align-items:center;
      font-size:12px; color:#4b5563; font-weight:600; margin-bottom:4px;
    }
    .parameter input[type=range] {
      width:100%; height:5px; background:#e5e7eb; border-radius:3px; outline:none;
    }
    .parameter input[type=range]::-webkit-slider-thumb {
      width:16px; height:16px; border-radius:50%; background:#3b82f6; cursor:pointer;
    }
    .parameter-value { font-size:11px; color:#6b7280; width:40px; text-align:right; }
    button {
      margin-right:5px; padding:8px 12px; border:none; background:#3b82f6; color:#fff; border-radius:6px; cursor:pointer;
    }
    button:hover { background:#2563eb; }
  </style>
</head>
<body>
  <div id="canvas-container"></div>
  <div id="control-panel">
    <h1>シミュレータ v4.5</h1>

    <div class="parameter-group">
      <h2>制御</h2>
      <button id="start-button">開始</button>
      <button id="pause-button">一時停止</button>
      <button id="reset-button">リセット</button>
    </div>

    <div class="parameter-group">
      <h2>発生・時間</h2>
      <div class="parameter">
        <label>時間スケール <span class="parameter-value" id="timeScale-value"></span></label>
        <input type="range" id="timeScale" min="0.01" max="1.0" step="0.01">
      </div>
      <div class="parameter">
        <label>発生間隔 <span class="parameter-value" id="spawnInterval-value"></span></label>
        <input type="range" id="spawnInterval" min="0.1" max="2.0" step="0.1">
      </div>
      <div class="parameter">
        <label>バッチサイズ <span class="parameter-value" id="batchSize-value"></span></label>
        <input type="range" id="batchSize" min="1" max="10" step="1">
      </div>
    </div>

    <div class="parameter-group">
      <h2>資源特性【拡張】</h2>
      <div class="parameter">
        <label>資源異質性 <span class="parameter-value" id="heterogeneity-value"></span></label>
        <input type="range" id="heterogeneity" min="0" max="1.0" step="0.1">
      </div>
      <div class="parameter">
        <label>寿命変動 <span class="parameter-value" id="lifespanVariance-value"></span></label>
        <input type="range" id="lifespanVariance" min="0" max="1.0" step="0.1">
      </div>
      <div class="parameter">
        <label>活用特化型の発生割合 <span class="parameter-value" id="exploiterRatio-value"></span></label>
        <input type="range" id="exploiterRatio" min="0" max="1.0" step="0.05">
      </div>
      <div class="parameter">
        <label>探索特化型の発生割合 <span class="parameter-value" id="explorerRatio-value"></span></label>
        <input type="range" id="explorerRatio" min="0" max="1.0" step="0.05">
      </div>
      <div class="parameter">
        <label>戦略的初期配置 <input type="checkbox" id="strategicSpawningEnabled"></label>
      </div>
    </div>

    <div class="parameter-group">
      <h2>多重重力</h2>
      <div class="parameter">
        <label>中央収束力 <span class="parameter-value" id="centralConvergence-value"></span></label>
        <input type="range" id="centralConvergence" min="0" max="0.1" step="0.001">
      </div>
      <div class="parameter">
        <label>クラスター収束力 <span class="parameter-value" id="clusterConvergence-value"></span></label>
        <input type="range" id="clusterConvergence" min="0" max="0.1" step="0.001">
      </div>
      <div class="parameter">
        <label>クラスター慣性 <span class="parameter-value" id="clusterInertia-value"></span></label>
        <input type="range" id="clusterInertia" min="0" max="0.1" step="0.001">
      </div>
      <div class="parameter">
        <label>粒子引力 <span class="parameter-value" id="peerAttraction-value"></span></label>
        <input type="range" id="peerAttraction" min="0" max="0.05" step="0.001">
      </div>
    </div>

    <div class="parameter-group">
      <h2>環境</h2>
      <div class="parameter">
        <label>成功閾値 <span class="parameter-value" id="successThreshold-value"></span></label>
        <input type="range" id="successThreshold" min="20" max="50" step="1">
      </div>
      <div class="parameter">
        <label>頂点容量 <span class="parameter-value" id="vertexCapacity-value"></span></label>
        <input type="range" id="vertexCapacity" min="1" max="20" step="1">
      </div>
      <div class="parameter">
        <label>減耗率 <span class="parameter-value" id="attritionRate-value"></span></label>
        <input type="range" id="attritionRate" min="0" max="0.1" step="0.001">
      </div>
    </div>
  </div>
</body>
</html>
<script>
  // --- 初期設定 ---
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, innerWidth/innerHeight, 0.1, 1000);
  camera.position.set(50,40,60); camera.lookAt(0,20,0);
  const renderer = new THREE.WebGLRenderer({antialias:true});
  renderer.setSize(innerWidth,innerHeight);
  document.getElementById('canvas-container').appendChild(renderer.domElement);

  // 光源・地面など初期化...
  
  // --- パラメータ & 状態 ---
  const parameters = {
    timeScale:0.1, spawnInterval:0.5, batchSize:3,
    heterogeneity:0.5, lifespanVariance:0.3,
    exploiterRatio:0.3, explorerRatio:0.3, strategicSpawningEnabled:true,
    trtForce:0.015, praForce:0.02,
    centralConvergence:0.03, clusterConvergence:0.02, clusterInertia:0.015, peerAttraction:0.01,
    successThreshold:38, vertexCapacity:5, attritionRate:0.02
  };
  let particles=[], nextId=0, simState={isRunning:false,isPaused:false,elapsed:0,lastSpawn:0};

  // --- 粒子クラス ---
  class ResourceParticle {
    constructor() {
      this.id = nextId++; this.age=0; this.isActive=true;
      this._determineType(); this._setAttributes();
      this._determineInitialPosition(); this._createMesh();
    }
    _determineType(){
      const r=Math.random();
      if(r<parameters.exploiterRatio) this.type='exploiter';
      else if(r<parameters.exploiterRatio+parameters.explorerRatio) this.type='explorer';
      else this.type='standard';
    }
    _setAttributes(){
      const v=(Math.random()-0.5)*2*parameters.heterogeneity;
      this.trt=1 + (this.type==='exploiter'?+v:-v);
      this.pra=1 + (this.type==='explorer'?+v:-v);
    }
    _determineInitialPosition(){
      const angle=Math.random()*Math.PI*2;
      const radius=Math.random()*20;
      this.pos=new THREE.Vector3(
        Math.cos(angle)*radius, 0.5, Math.sin(angle)*radius
      );
      // 戦略的初期配置ロジックをここに追加...
    }
    _createMesh(){
      const geom=new THREE.SphereGeometry(0.5,8,8);
      const mat=new THREE.MeshPhongMaterial({color:0x3b82f6});
      this.mesh=new THREE.Mesh(geom,mat);
      this.mesh.position.copy(this.pos);
      scene.add(this.mesh);
    }
    update(dt){
      if(!this.isActive)return;
      // TRT/PRA 反力、中央収束、境界反射、成功/失敗判定を実装...
      this.mesh.position.copy(this.pos);
    }
    succeed(){ this.isActive=false; }
    die(){ this.isActive=false; scene.remove(this.mesh); }
  }

  // --- UI初期化 ---
  function setupUI(){
    document.querySelectorAll('#control-panel input').forEach(input=>{
      const id=input.id; if(!(id in parameters))return;
      if(input.type==='checkbox') input.checked=parameters[id];
      else input.value=parameters[id];
      input.oninput=e=>{
        parameters[id] = e.target.type==='checkbox'?e.target.checked:parseFloat(e.target.value);
        const lbl=document.getElementById(`${id}-value`);
        if(lbl) lbl.textContent = parameters[id].toFixed(2);
      };
    });
    document.getElementById('start-button').onclick=()=>simState.isRunning=true;
    document.getElementById('pause-button').onclick=()=>simState.isPaused=!simState.isPaused;
    document.getElementById('reset-button').onclick=resetSim;
  }

  // --- シミュレーション制御 ---
  function spawnParticles(n){
    for(let i=0;i<n;i++)particles.push(new ResourceParticle());
  }
  function resetSim(){
    particles.forEach(p=>scene.remove(p.mesh));
    particles=[]; nextId=0; simState={isRunning:false,isPaused:false,elapsed:0,lastSpawn:0};
    spawnParticles(20);
  }

  // --- アニメーションループ ---
  let lastTime=0;
  function animate(t){
    requestAnimationFrame(animate);
    const dt=(t-lastTime)*0.001*parameters.timeScale; lastTime=t;
    if(simState.isRunning && !simState.isPaused){
      simState.elapsed+=dt;
      if(simState.elapsed - simState.lastSpawn > parameters.spawnInterval){
        spawnParticles(parameters.batchSize);
        simState.lastSpawn = simState.elapsed;
      }
      particles.forEach(p=>p.update(dt));
      particles=particles.filter(p=>p.isActive);
    }
    renderer.render(scene,camera);
  }

  // --- 初期化呼び出し ---
  setupUI(); resetSim(); animate(0);
</script>
